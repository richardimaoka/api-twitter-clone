type Query {
  weeks: [Week]
  unions: TypeAB
}

union TypeAB = TypeA | TypeB

type TypeA {
  a: Int
}

type TypeB {
  b: Int
}

type Course {
  _: Boolean
}

type Week {
  trainings: [Training]
}

type Training {
  _: Boolean
  learningObjectives: [LearningObjective]
}

type LearningObjective {
  description: String
}

type Grade {
  _: Boolean
}

type Page {
  progress: Int
}

type Mutation {
  addTrainingToWeek(
    training: TrainingInput
    weekOf: Int
  ): AddTrainingToWeekMutationResponse
}

input TrainingInput {
  _: Boolean
}

interface MutationResponse {
  code: String!
  success: Boolean!
  message: String!
}

type AddTrainingToWeekMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  user: Training
}
